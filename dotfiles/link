#! /bin/bash


if [ $USER == "root" ]; then
    echo "This script cannot be run as root"
    exit
fi

# The backup directory
BACKUP_DIR="$HOME/.df_backup"

if [ ! -d $BACKUP_DIR ]; then
    mkdir $BACKUP_DIR
fi

# Utility functions
function link_file {
  if [[ -f $1 && ! -L $1 ]]; then
    echo "Moving $1 to $BACKUP_DIR"
    mv $1 $BACKUP_DIR
  fi
  echo "Setting up link $1 -> $2"
  ln -ns $2 $1
}

function link_dir {
  if [[ -d $1 && ! -L $1 ]]; then
    echo "Moving $1 to $BACKUP_DIR"
    mv $1 $BACKUP_DIR
  fi
  echo "Setting up link $1 -> $2"
  ln -ns $2 $1
}

######################################################################

# EMACS
LO_EMACS_DIR="$HOME/Development/dotfiles/emacs.d"
EMACS_DIR="$HOME/.emacs.d"
LO_EMACS="$HOME/Development/dotfiles/emacs"
EMACS="$HOME/.emacs"

# BASH PROFILE AND ALIASES
LO_BASH_PROFILE="$HOME/Development/dotfiles/bash_profile"
BASH_PROFILE="$HOME/.bash_profile"
LO_BASH_ALIASES="$HOME/Development/dotfiles/bash_aliases"
BASH_ALIASES="$HOME/.bash_aliases"
LO_BASH_PROMPT="$HOME/Development/dotfiles/bash_prompt"
BASH_PROMPT="$HOME/.bash_prompt"

# GCONF
LO_TERM_PROFILE="$HOME/Development/dotfiles/gconf/terminal/profile.xml"
TERM_PROFILE="$HOME/.gconf/apps/gnome-terminal/profiles/Default/%gconf.xml"
LO_TERM_BINDINGS="$HOME/Development/dotfiles/gconf/terminal/bindings.xml"
TERM_BINDINGS="$HOME/.gconf/apps/gnome-terminal/keybindings/%gconf.xml"

# PYLINT
LO_PYLINTRC="$HOME/Development/dotfiles/pylintrc"
PYLINTRC="$HOME/.pylintrc"

# GITIGNORE
LO_GITIGNORE="$HOME/Development/dotfiles/gitignore_global"
GITIGNORE="$HOME/.gitignore_global"

# LINK
link_file $EMACS_DIR $LO_EMACS_DIR
link_dir $EMACS $LO_EMACS
link_file $BASH_PROFILE $LO_BASH_PROFILE
link_file $BASH_PROMPT $LO_BASH_PROMPT
link_file $BASH_ALIASES $LO_BASH_ALIASES
link_file $TERM_PROFILE $LO_TERM_PROFILE
link_file $TERM_BINDINGS $LO_TERM_BINDINGS
link_file $PYLINTRC $LO_PYLINTRC
link_file $GITIGNORE $LO_GITIGNORE

# GIT CONFIGURATION
read -e -p "Setup git config? (yes/no) " yn

if [ $yn == "yes" ]; then

    echo "Setting up global git config"
    read -e -p "Git User: " GITUSER
    read -e -p "Git Email: " GITEMAIL

    git config --global user.name "$GITUSER"
    git config --global user.email "$GITEMAIL"
    git config --global core.exlcudesfiles "$HOME/.gitignore_global"
    git config --global core.pager less
    git config --global color.ui true
fi

# SSH KEYS
read -e -p "Setup SSH keys? (yes/no) " yn

if [ $yn == "yes" ]; then
    if [ -z "$GITEMAIL"]; then
        read -e -p "Git Email: " GITEMAIL
    fi

    if [ ! -d "$HOME/.ssh" ]; then
        mkdir "$HOME/.ssh"
    fi

    if [ ! -d "$HOME/.ssh/key_backup" ]; then
        mkdir "$HOME/.ssh/key_backup"
    fi

    cp $HOME/.ssh/id_rsa* $HOME/.ssh/key_backup
    rm id_rsa*

    ssh-keygen -r rsa -C "$GITEMAIL"

    ssh -T git@github.com
fi

echo "Done"